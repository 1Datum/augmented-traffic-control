# -*- mode: ruby -*-
# vi: set ft=ruby :

boxinfo = {
    :name => 'precise64',
    :url => 'http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-12.04_chef-provisionerless.box',
    :usbehci => 'on',
}

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.define 'gateway' do |box|
        box.vm.box = boxinfo[:name].to_s
        box.vm.box_url = boxinfo[:url].to_s
        box.vm.synced_folder '../../atc', '/usr/local/src/atc/atc'
        box.vm.hostname = 'gateway'
        box.vm.provider "virtualbox" do |v|
            v.customize ["modifyvm", :id, "--usbehci", boxinfo.fetch(:usbehci, "on")]
        end

        # Chef / Berkshelf
        box.omnibus.chef_version = :latest
        box.berkshelf.berksfile_path = "../../chef/atc/Berksfile"
        box.berkshelf.enabled = true
        box.vm.provision :chef_solo do |chef|
            chef.run_list = [
                "recipe[python]",
                "recipe[atc::default]"
            ]
            if box.vm.box == 'centos65'
                chef.json = {
                    "python" => {
                      "install_method" => "source",
                      "distribute_install_py_version" => "2.7",
                    }
                }
            end
        end
        box.vm.provision 'shell', path: 'provision.sh'

        # Networking
        # Not sure if forwarded port is necessary or not
        box.vm.network :forwarded_port, guest: 8000, host: 8080, auto_correct: true
        box.vm.network :private_network, ip: '192.168.10.2'
        box.vm.network :private_network, ip: '192.168.20.2'
    end

    config.vm.define 'client' do |box|
        box.vm.box = boxinfo[:name].to_s
        box.vm.box_url = boxinfo[:url].to_s
        box.vm.hostname = 'client'
        box.vm.provider "virtualbox" do |v|
            v.customize ["modifyvm", :id, "--usbehci", boxinfo.fetch(:usbehci, "on")]
        end

        # Provisioner
        box.vm.provision 'shell', path: 'provision.sh'

        # Networking
        box.vm.network :private_network, ip: '192.168.20.10'
    end

    config.vm.define 'server' do |box|
        box.vm.box = boxinfo[:name].to_s
        box.vm.box_url = boxinfo[:url].to_s
        box.vm.hostname = 'server'
        box.vm.provider "virtualbox" do |v|
            v.customize ["modifyvm", :id, "--usbehci", boxinfo.fetch(:usbehci, "on")]
        end

        # Provisioner
        box.vm.provision 'shell', path: 'provision.sh'

        # Networking
        box.vm.network :private_network, ip: '192.168.10.10'
    end
end
