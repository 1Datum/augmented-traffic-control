#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PlatformType(object):
  LINUX = 0

  _VALUES_TO_NAMES = {
    0: "LINUX",
  }

  _NAMES_TO_VALUES = {
    "LINUX": 0,
  }


class Delay(object):
  """
  Attributes:
   - delay
   - jitter
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'delay', None, None, ), # 1
    (2, TType.I32, 'jitter', None, 0, ), # 2
    (3, TType.DOUBLE, 'correlation', None, 0, ), # 3
  )

  def __init__(self, delay=None, jitter=thrift_spec[2][4], correlation=thrift_spec[3][4],):
    self.delay = delay
    self.jitter = jitter
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.delay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.jitter = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Delay')
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.I32, 1)
      oprot.writeI32(self.delay)
      oprot.writeFieldEnd()
    if self.jitter is not None:
      oprot.writeFieldBegin('jitter', TType.I32, 2)
      oprot.writeI32(self.jitter)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 3)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.delay)
    value = (value * 31) ^ hash(self.jitter)
    value = (value * 31) ^ hash(self.correlation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Loss(object):
  """
  Attributes:
   - percentage
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, None, ), # 1
    (2, TType.DOUBLE, 'correlation', None, 0, ), # 2
  )

  def __init__(self, percentage=None, correlation=thrift_spec[2][4],):
    self.percentage = percentage
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Loss')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 2)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.percentage)
    value = (value * 31) ^ hash(self.correlation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Reorder(object):
  """
  Attributes:
   - percentage
   - gap
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, None, ), # 1
    (2, TType.I32, 'gap', None, 0, ), # 2
    (3, TType.DOUBLE, 'correlation', None, 0, ), # 3
  )

  def __init__(self, percentage=None, gap=thrift_spec[2][4], correlation=thrift_spec[3][4],):
    self.percentage = percentage
    self.gap = gap
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.gap = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reorder')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.gap is not None:
      oprot.writeFieldBegin('gap', TType.I32, 2)
      oprot.writeI32(self.gap)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 3)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.percentage)
    value = (value * 31) ^ hash(self.gap)
    value = (value * 31) ^ hash(self.correlation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Corruption(object):
  """
  Attributes:
   - percentage
   - correlation
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'percentage', None, 0, ), # 1
    (2, TType.DOUBLE, 'correlation', None, 0, ), # 2
  )

  def __init__(self, percentage=thrift_spec[1][4], correlation=thrift_spec[2][4],):
    self.percentage = percentage
    self.correlation = correlation

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.percentage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.correlation = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Corruption')
    if self.percentage is not None:
      oprot.writeFieldBegin('percentage', TType.DOUBLE, 1)
      oprot.writeDouble(self.percentage)
      oprot.writeFieldEnd()
    if self.correlation is not None:
      oprot.writeFieldBegin('correlation', TType.DOUBLE, 2)
      oprot.writeDouble(self.correlation)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.percentage)
    value = (value * 31) ^ hash(self.correlation)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Shaping(object):
  """
  Attributes:
   - rate
   - delay
   - loss
   - reorder
   - corruption
   - iptables_options
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rate', None, None, ), # 1
    (2, TType.STRUCT, 'delay', (Delay, Delay.thrift_spec), Delay(**{
      "delay" : 0,
    }), ), # 2
    (3, TType.STRUCT, 'loss', (Loss, Loss.thrift_spec), Loss(**{
      "percentage" : 0,
    }), ), # 3
    (4, TType.STRUCT, 'reorder', (Reorder, Reorder.thrift_spec), Reorder(**{
      "percentage" : 0,
    }), ), # 4
    (5, TType.STRUCT, 'corruption', (Corruption, Corruption.thrift_spec), Corruption(**{
      "percentage" : 0,
    }), ), # 5
    (6, TType.LIST, 'iptables_options', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, rate=None, delay=thrift_spec[2][4], loss=thrift_spec[3][4], reorder=thrift_spec[4][4], corruption=thrift_spec[5][4], iptables_options=None,):
    self.rate = rate
    if delay is self.thrift_spec[2][4]:
      delay = Delay(**{
      "delay" : 0,
    })
    self.delay = delay
    if loss is self.thrift_spec[3][4]:
      loss = Loss(**{
      "percentage" : 0,
    })
    self.loss = loss
    if reorder is self.thrift_spec[4][4]:
      reorder = Reorder(**{
      "percentage" : 0,
    })
    self.reorder = reorder
    if corruption is self.thrift_spec[5][4]:
      corruption = Corruption(**{
      "percentage" : 0,
    })
    self.corruption = corruption
    self.iptables_options = iptables_options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.rate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.delay = Delay()
          self.delay.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.loss = Loss()
          self.loss.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.reorder = Reorder()
          self.reorder.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.corruption = Corruption()
          self.corruption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.iptables_options = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.iptables_options.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Shaping')
    if self.rate is not None:
      oprot.writeFieldBegin('rate', TType.I32, 1)
      oprot.writeI32(self.rate)
      oprot.writeFieldEnd()
    if self.delay is not None:
      oprot.writeFieldBegin('delay', TType.STRUCT, 2)
      self.delay.write(oprot)
      oprot.writeFieldEnd()
    if self.loss is not None:
      oprot.writeFieldBegin('loss', TType.STRUCT, 3)
      self.loss.write(oprot)
      oprot.writeFieldEnd()
    if self.reorder is not None:
      oprot.writeFieldBegin('reorder', TType.STRUCT, 4)
      self.reorder.write(oprot)
      oprot.writeFieldEnd()
    if self.corruption is not None:
      oprot.writeFieldBegin('corruption', TType.STRUCT, 5)
      self.corruption.write(oprot)
      oprot.writeFieldEnd()
    if self.iptables_options is not None:
      oprot.writeFieldBegin('iptables_options', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.iptables_options))
      for iter6 in self.iptables_options:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rate)
    value = (value * 31) ^ hash(self.delay)
    value = (value * 31) ^ hash(self.loss)
    value = (value * 31) ^ hash(self.reorder)
    value = (value * 31) ^ hash(self.corruption)
    value = (value * 31) ^ hash(self.iptables_options)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Setting(object):
  """
  Attributes:
   - up
   - down
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'up', (Shaping, Shaping.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'down', (Shaping, Shaping.thrift_spec), None, ), # 2
  )

  def __init__(self, up=None, down=None,):
    self.up = up
    self.down = down

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.up = Shaping()
          self.up.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.down = Shaping()
          self.down.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Setting')
    if self.up is not None:
      oprot.writeFieldBegin('up', TType.STRUCT, 1)
      self.up.write(oprot)
      oprot.writeFieldEnd()
    if self.down is not None:
      oprot.writeFieldBegin('down', TType.STRUCT, 2)
      self.down.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.up)
    value = (value * 31) ^ hash(self.down)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AtcdInfo(object):
  """
  Attributes:
   - platform
   - version
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'platform', None, None, ), # 1
    (2, TType.STRING, 'version', None, None, ), # 2
  )

  def __init__(self, platform=None, version=None,):
    self.platform = platform
    self.version = version

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.platform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AtcdInfo')
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 1)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 2)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.platform)
    value = (value * 31) ^ hash(self.version)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShapingGroup(object):
  """
  Attributes:
   - id
   - members
   - shaping
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.LIST, 'members', (TType.STRING,None), None, ), # 2
    (3, TType.STRUCT, 'shaping', (Setting, Setting.thrift_spec), None, ), # 3
  )

  def __init__(self, id=None, members=None, shaping=None,):
    self.id = id
    self.members = members
    self.shaping = shaping

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.members = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.members.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.shaping = Setting()
          self.shaping.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShapingGroup')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.members is not None:
      oprot.writeFieldBegin('members', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.members))
      for iter13 in self.members:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shaping is not None:
      oprot.writeFieldBegin('shaping', TType.STRUCT, 3)
      self.shaping.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.members)
    value = (value * 31) ^ hash(self.shaping)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
