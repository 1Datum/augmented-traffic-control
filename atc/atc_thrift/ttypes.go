// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package atc_thrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PlatformType int64

const (
	PlatformType_LINUX PlatformType = 0
)

func (p PlatformType) String() string {
	switch p {
	case PlatformType_LINUX:
		return "PlatformType_LINUX"
	}
	return "<UNSET>"
}

func PlatformTypeFromString(s string) (PlatformType, error) {
	switch s {
	case "PlatformType_LINUX":
		return PlatformType_LINUX, nil
	}
	return PlatformType(0), fmt.Errorf("not a valid PlatformType string")
}

func PlatformTypePtr(v PlatformType) *PlatformType { return &v }

type Delay struct {
	Delay       int32   `thrift:"delay,1" json:"delay"`
	Jitter      int32   `thrift:"jitter,2" json:"jitter"`
	Correlation float64 `thrift:"correlation,3" json:"correlation"`
}

func NewDelay() *Delay {
	return &Delay{}
}

func (p *Delay) GetDelay() int32 {
	return p.Delay
}

var Delay_Jitter_DEFAULT int32 = 0

func (p *Delay) GetJitter() int32 {
	return p.Jitter
}

var Delay_Correlation_DEFAULT float64 = 0

func (p *Delay) GetCorrelation() float64 {
	return p.Correlation
}
func (p *Delay) IsSetJitter() bool {
	return p.Jitter != Delay_Jitter_DEFAULT
}

func (p *Delay) IsSetCorrelation() bool {
	return p.Correlation != Delay_Correlation_DEFAULT
}

func (p *Delay) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Delay) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *Delay) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Jitter = v
	}
	return nil
}

func (p *Delay) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Delay) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Delay"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Delay) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:delay: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return fmt.Errorf("%T.delay (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:delay: %s", p, err)
	}
	return err
}

func (p *Delay) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJitter() {
		if err := oprot.WriteFieldBegin("jitter", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:jitter: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Jitter)); err != nil {
			return fmt.Errorf("%T.jitter (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:jitter: %s", p, err)
		}
	}
	return err
}

func (p *Delay) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Delay) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Delay(%+v)", *p)
}

type Loss struct {
	Percentage  float64 `thrift:"percentage,1" json:"percentage"`
	Correlation float64 `thrift:"correlation,2" json:"correlation"`
}

func NewLoss() *Loss {
	return &Loss{}
}

func (p *Loss) GetPercentage() float64 {
	return p.Percentage
}

var Loss_Correlation_DEFAULT float64 = 0

func (p *Loss) GetCorrelation() float64 {
	return p.Correlation
}
func (p *Loss) IsSetCorrelation() bool {
	return p.Correlation != Loss_Correlation_DEFAULT
}

func (p *Loss) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Loss) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Loss) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Loss) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Loss"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Loss) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Loss) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Loss) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Loss(%+v)", *p)
}

type Reorder struct {
	Percentage  float64 `thrift:"percentage,1" json:"percentage"`
	Gap         int32   `thrift:"gap,2" json:"gap"`
	Correlation float64 `thrift:"correlation,3" json:"correlation"`
}

func NewReorder() *Reorder {
	return &Reorder{}
}

func (p *Reorder) GetPercentage() float64 {
	return p.Percentage
}

func (p *Reorder) GetGap() int32 {
	return p.Gap
}

var Reorder_Correlation_DEFAULT float64 = 0

func (p *Reorder) GetCorrelation() float64 {
	return p.Correlation
}
func (p *Reorder) IsSetCorrelation() bool {
	return p.Correlation != Reorder_Correlation_DEFAULT
}

func (p *Reorder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Reorder) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Reorder) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Gap = v
	}
	return nil
}

func (p *Reorder) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Reorder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Reorder"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Reorder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Reorder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gap", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:gap: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Gap)); err != nil {
		return fmt.Errorf("%T.gap (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:gap: %s", p, err)
	}
	return err
}

func (p *Reorder) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Reorder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reorder(%+v)", *p)
}

type Corruption struct {
	Percentage  float64 `thrift:"percentage,1" json:"percentage"`
	Correlation float64 `thrift:"correlation,2" json:"correlation"`
}

func NewCorruption() *Corruption {
	return &Corruption{}
}

func (p *Corruption) GetPercentage() float64 {
	return p.Percentage
}

var Corruption_Correlation_DEFAULT float64 = 0

func (p *Corruption) GetCorrelation() float64 {
	return p.Correlation
}
func (p *Corruption) IsSetCorrelation() bool {
	return p.Correlation != Corruption_Correlation_DEFAULT
}

func (p *Corruption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Corruption) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Corruption) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Corruption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Corruption"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Corruption) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Corruption) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Corruption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Corruption(%+v)", *p)
}

type Shaping struct {
	Rate            int32       `thrift:"rate,1" json:"rate"`
	Delay           *Delay      `thrift:"delay,2" json:"delay"`
	Loss            *Loss       `thrift:"loss,3" json:"loss"`
	Reorder         *Reorder    `thrift:"reorder,4" json:"reorder"`
	Corruption      *Corruption `thrift:"corruption,5" json:"corruption"`
	IptablesOptions []string    `thrift:"iptables_options,6" json:"iptables_options"`
}

func NewShaping() *Shaping {
	return &Shaping{}
}

func (p *Shaping) GetRate() int32 {
	return p.Rate
}

var Shaping_Delay_DEFAULT *Delay = &Delay{
	Delay: 0}

func (p *Shaping) GetDelay() *Delay {
	if !p.IsSetDelay() {
		return Shaping_Delay_DEFAULT
	}
	return p.Delay
}

var Shaping_Loss_DEFAULT *Loss = &Loss{
	Percentage: 0}

func (p *Shaping) GetLoss() *Loss {
	if !p.IsSetLoss() {
		return Shaping_Loss_DEFAULT
	}
	return p.Loss
}

var Shaping_Reorder_DEFAULT *Reorder = &Reorder{
	Percentage: 0}

func (p *Shaping) GetReorder() *Reorder {
	if !p.IsSetReorder() {
		return Shaping_Reorder_DEFAULT
	}
	return p.Reorder
}

var Shaping_Corruption_DEFAULT *Corruption = &Corruption{
	Percentage: 0}

func (p *Shaping) GetCorruption() *Corruption {
	if !p.IsSetCorruption() {
		return Shaping_Corruption_DEFAULT
	}
	return p.Corruption
}

var Shaping_IptablesOptions_DEFAULT []string

func (p *Shaping) GetIptablesOptions() []string {
	return p.IptablesOptions
}
func (p *Shaping) IsSetDelay() bool {
	return p.Delay != nil
}

func (p *Shaping) IsSetLoss() bool {
	return p.Loss != nil
}

func (p *Shaping) IsSetReorder() bool {
	return p.Reorder != nil
}

func (p *Shaping) IsSetCorruption() bool {
	return p.Corruption != nil
}

func (p *Shaping) IsSetIptablesOptions() bool {
	return p.IptablesOptions != nil
}

func (p *Shaping) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Shaping) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Rate = v
	}
	return nil
}

func (p *Shaping) ReadField2(iprot thrift.TProtocol) error {
	p.Delay = &Delay{}
	if err := p.Delay.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Delay, err)
	}
	return nil
}

func (p *Shaping) ReadField3(iprot thrift.TProtocol) error {
	p.Loss = &Loss{}
	if err := p.Loss.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Loss, err)
	}
	return nil
}

func (p *Shaping) ReadField4(iprot thrift.TProtocol) error {
	p.Reorder = &Reorder{}
	if err := p.Reorder.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Reorder, err)
	}
	return nil
}

func (p *Shaping) ReadField5(iprot thrift.TProtocol) error {
	p.Corruption = &Corruption{}
	if err := p.Corruption.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Corruption, err)
	}
	return nil
}

func (p *Shaping) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.IptablesOptions = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.IptablesOptions = append(p.IptablesOptions, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Shaping) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shaping"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Shaping) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rate", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Rate)); err != nil {
		return fmt.Errorf("%T.rate (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rate: %s", p, err)
	}
	return err
}

func (p *Shaping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelay() {
		if err := oprot.WriteFieldBegin("delay", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:delay: %s", p, err)
		}
		if err := p.Delay.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Delay, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:delay: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoss() {
		if err := oprot.WriteFieldBegin("loss", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:loss: %s", p, err)
		}
		if err := p.Loss.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Loss, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:loss: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReorder() {
		if err := oprot.WriteFieldBegin("reorder", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:reorder: %s", p, err)
		}
		if err := p.Reorder.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Reorder, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:reorder: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorruption() {
		if err := oprot.WriteFieldBegin("corruption", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:corruption: %s", p, err)
		}
		if err := p.Corruption.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Corruption, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:corruption: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIptablesOptions() {
		if err := oprot.WriteFieldBegin("iptables_options", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:iptables_options: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.IptablesOptions)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.IptablesOptions {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:iptables_options: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Shaping(%+v)", *p)
}

type Setting struct {
	Up   *Shaping `thrift:"up,1" json:"up"`
	Down *Shaping `thrift:"down,2" json:"down"`
}

func NewSetting() *Setting {
	return &Setting{}
}

var Setting_Up_DEFAULT *Shaping

func (p *Setting) GetUp() *Shaping {
	if !p.IsSetUp() {
		return Setting_Up_DEFAULT
	}
	return p.Up
}

var Setting_Down_DEFAULT *Shaping

func (p *Setting) GetDown() *Shaping {
	if !p.IsSetDown() {
		return Setting_Down_DEFAULT
	}
	return p.Down
}
func (p *Setting) IsSetUp() bool {
	return p.Up != nil
}

func (p *Setting) IsSetDown() bool {
	return p.Down != nil
}

func (p *Setting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Setting) ReadField1(iprot thrift.TProtocol) error {
	p.Up = &Shaping{}
	if err := p.Up.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Up, err)
	}
	return nil
}

func (p *Setting) ReadField2(iprot thrift.TProtocol) error {
	p.Down = &Shaping{}
	if err := p.Down.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Down, err)
	}
	return nil
}

func (p *Setting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Setting"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Setting) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("up", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:up: %s", p, err)
	}
	if err := p.Up.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Up, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:up: %s", p, err)
	}
	return err
}

func (p *Setting) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("down", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:down: %s", p, err)
	}
	if err := p.Down.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Down, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:down: %s", p, err)
	}
	return err
}

func (p *Setting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Setting(%+v)", *p)
}

type AtcdInfo struct {
	Platform PlatformType `thrift:"platform,1" json:"platform"`
	Version  string       `thrift:"version,2" json:"version"`
}

func NewAtcdInfo() *AtcdInfo {
	return &AtcdInfo{}
}

func (p *AtcdInfo) GetPlatform() PlatformType {
	return p.Platform
}

func (p *AtcdInfo) GetVersion() string {
	return p.Version
}
func (p *AtcdInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtcdInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := PlatformType(v)
		p.Platform = temp
	}
	return nil
}

func (p *AtcdInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *AtcdInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtcdInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AtcdInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("platform", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:platform: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Platform)); err != nil {
		return fmt.Errorf("%T.platform (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:platform: %s", p, err)
	}
	return err
}

func (p *AtcdInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version: %s", p, err)
	}
	return err
}

func (p *AtcdInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtcdInfo(%+v)", *p)
}

type ShapingGroup struct {
	Id      int64    `thrift:"id,1" json:"id"`
	Members []string `thrift:"members,2" json:"members"`
	Shaping *Setting `thrift:"shaping,3" json:"shaping"`
}

func NewShapingGroup() *ShapingGroup {
	return &ShapingGroup{}
}

func (p *ShapingGroup) GetId() int64 {
	return p.Id
}

func (p *ShapingGroup) GetMembers() []string {
	return p.Members
}

var ShapingGroup_Shaping_DEFAULT *Setting

func (p *ShapingGroup) GetShaping() *Setting {
	if !p.IsSetShaping() {
		return ShapingGroup_Shaping_DEFAULT
	}
	return p.Shaping
}
func (p *ShapingGroup) IsSetShaping() bool {
	return p.Shaping != nil
}

func (p *ShapingGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShapingGroup) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *ShapingGroup) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Members = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Members = append(p.Members, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ShapingGroup) ReadField3(iprot thrift.TProtocol) error {
	p.Shaping = &Setting{}
	if err := p.Shaping.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Shaping, err)
	}
	return nil
}

func (p *ShapingGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShapingGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ShapingGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *ShapingGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("members", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:members: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Members)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Members {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:members: %s", p, err)
	}
	return err
}

func (p *ShapingGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetShaping() {
		if err := oprot.WriteFieldBegin("shaping", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:shaping: %s", p, err)
		}
		if err := p.Shaping.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Shaping, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:shaping: %s", p, err)
		}
	}
	return err
}

func (p *ShapingGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShapingGroup(%+v)", *p)
}
